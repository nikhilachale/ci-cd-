FROM node:22-alpine AS base

# Install build dependencies for native modules
RUN apk add --no-cache libc6-compat python3 make g++

WORKDIR /app

# Copy root workspace files
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./

# Install both npm (latest) and pnpm globally
RUN npm install -g npm@11.6.2 pnpm@9.12.0

# Copy full repo
COPY . .

# Set environment variables to disable native binaries
ENV LIGHTNINGCSS_FORCE_NO_NATIVE=true
ENV DISABLE_LIGHTNINGCSS=true
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Install dependencies from root to resolve all workspaces
RUN pnpm install --frozen-lockfile

# Move to UI app
WORKDIR /app/apps/ui

# Replace globals.css with Docker-specific version (no Tailwind import)
RUN cp app/globals-docker.css app/globals.css

# Build the Next.js app with fallback CSS processing
RUN LIGHTNINGCSS_FORCE_NO_NATIVE=true DISABLE_LIGHTNINGCSS=true ESLINT_NO_DEV_ERRORS=true pnpm run build

# Production stage
FROM node:22-alpine AS runner

RUN apk add --no-cache libc6-compat

WORKDIR /app

# Set environment variables
ENV NODE_ENV=production
ENV LIGHTNINGCSS_FORCE_NO_NATIVE=1
ENV NEXT_TELEMETRY_DISABLED=1

# Copy built application from standalone build
COPY --from=base /app/apps/ui/.next/standalone ./
COPY --from=base /app/apps/ui/.next/static ./apps/ui/.next/static
COPY --from=base /app/apps/ui/public ./apps/ui/public

EXPOSE 3000

CMD ["node", "apps/ui/server.js"]